Chapter 14
====================================
Обобщения - параматризовані типи
Обобщения працюють тільки з ссилочними типами
Обобщения дозволть досягнути типову безпеку
(Гарантують що об'єкти будуть того ж типу)


Возможность создавать типизированный (т.е. обеспечивающий типовую безопасность) код,
в котором ошибки несоответствия типов перехватываются компилятором,
является главным преимуществом обобщений.

Стирання
Стирання це спосіб реалізації роботи JVM з обобщениями
Відбувається все так:
При компіляції всі обобщнія видаляються, відповідно всі параметри приходять до типу Обджект
(якщо не було явно вказаного типу)
Потім відбувається приведення типів,
відповідно до переданих аргументів типу, для сумісності з цими ж типами

Введння обобщений породило новий вид помилок: неоднозначність
Неоднозначність це помилка перегрузки методів,
в разі якщо під кожен аргумент типу був перегружений один і той самий метод,
а в якості аргуметів були передані аргументи одного типу
Відповідно в нас буде 2 иетоди з однаковою сигнатурою, що саме по собі являється попилкою

Аргументи типу від класу неможна використовувати в статичних елементах(статичних змінних, або блоках)
Але можна створити стачний метод, який приймає аргументи типу

Обобщенний клас не може наслідуватись від Throwable
====================================


Chapter 28
====================================
Callable на відмінну від Тред, повертає результат виконання
Future приймає Коллабл і дозволяє отримати результат виконання в майбутньому,
після завершення потоку коллабл

Lock виступає альтернативою блокам синхронайзд,
при потребі отримати доступ до загальних ресурсів
Класс ReentrantLock є реалізацією інтерфейсу Лок, за допомогою якого ми створюємо локи

Fork/Join Framework дозволяє розпалалелити процеси на різні процесори або ядра,
створюючи цим паралельність виконання процесів, яке також називають паралельним програмуванням

В Форк\джоін використвується альтернатива тредам - ForkJoinTask
RecursiveTask return result
RecursiveAction return nothing
RecursiveTask and RecursiveAction have own method for working code - compute()(run() in Thread)
This classes uses like parents classes for task classes
(class customer extends recursiveTask)

All this class executes from ForkJoinPool
If you want execute taks from pool, you must all methode invoke({your task})
Method invoke starts your task and return result from this task

If you want execute your task without waiting for result, you can call method execute()
After calling this method task starts, but we dont waiting, and going up our code