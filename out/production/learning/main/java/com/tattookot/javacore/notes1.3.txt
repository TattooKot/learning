Chapter 10
====================================
Керування всіми процесами які пов'язані з створенням і перехопленням виключень
відбувається з допомогою 5 ключових слів - try, catch, throw, throws, finally

Всі ексепшени наслідуються від класу Throwable

Ієрархія
Throwable
    Exception
        RunTimeException
    Error


RunTimeException - помилки при діленні на нуль, або помилки інедексації масивів
Error-и це аварійні помилки, які не можуть бути перехоплені і правильно оброблені в коді

Якщо ексепшн не перехоплюється в коді, тоді він буде перехоаплений стандарним способом,
виведенням стеку в консоль, та зупинка програми

Every try need catch OR finally

If you need to create yours own exception you must create new class,
and extend this class from Exception
====================================


Chapter 13
====================================
В java доступні потоки вводу-виводу для байт або символів
Символи в джава за замовчуванням закодовані в юнікоді

На верхівці ієрархії вводу-виводу БАЙТ стоять два абстрактні класи InputStream/OutputStream
На верхівці ієрархії вводу-виводу СИМВОЛІВ стоять два абстрактні класи Reader/Writer

Для того щоб при частому визові методів якогось класу не писати Ім'яКласу.метод(),
можна статично імпортувати метод цей метод, і тоді викликати метод момжна буде просто по назві(метод())
import static class.method;
====================================


Chapter 15
====================================
Функціональний інтерфейс, це інтерфейс який має в собі лише один абстрактний метод.
Також функціональні інтерфейси називають SAM (Single Abstract Method)
Runnable, Closable, ect.

Лямбди
Лямбда це фактично анонімний клас або метод
Лямби бувають двох типів: Однострочні та Блочні
Лямбди можна вирокистовувати з функціональними інтерфейсами
Можна апередавати статичні та не статичні методи в лябмди (Класс::метод, Екземпляр_класу::метод)
В лямбдах можна заміняти методи на інші,якщо вони сумісні(приймають ті самі парамерти, та повертають
об'єкт того ж типу шо і оригінальний метод)
====================================


Chapter 20
====================================
Java i/o and java nio, ist not the same
Class File from io, can be replased by class Files or Path from nio
In try-with-resources можна використовувати тільки ті класи які підтримують інтерфейс AutoClosable